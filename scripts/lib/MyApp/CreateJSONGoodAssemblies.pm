#!/usr/bin/env perl

package MyApp::CreateJSONGoodAssemblies;
use MooseX::App::Command;
extends 'MyApp';
with 'MyApp::Role::JSON';
use namespace::autoclean;
use IO::Uncompress::AnyUncompress qw(anyuncompress $AnyUncompressError);
use File::JSON::Slurper qw/ read_json write_json/;
use Hash::Merge qw/merge/;

command_short_description q[Create a JSON file from all consensus files generated by MIRA and annotaded as genbank format];

sub add_genbank_to_json {
    my ($self, $gb, $json) = @_;
    foreach my $status (keys %{$json}) {
        foreach my $sample (keys %{$json->{$status}}) {
            foreach my $file (keys %{$json->{$status}{$sample}}) {
                foreach my $step (keys %{$json->{$status}->{$sample}{$file}}) {
                    $json->{$status}{$sample}{$file}{$step}{'output'} = $gb;
                }
            }
        }
    }
}

sub run {
    my ($self) = @_;
    my @genbank_files;

    # Get subdirs
    my $dir = $self->input_directory;
    my $dir_good = $dir . "/classified/good/genbank_consensus";
    my $dir_bad = $dir . "/classified/bad/genbank_consensus";

    my @good_genbank_files =  glob( $dir_good . '/*.' . $self->file_extension );
    my @bad_genbank_files =  glob( $dir_bad . '/*.' . $self->file_extension );

    my @aux_genbank_files = (@good_genbank_files, @bad_genbank_files);

    my $merged_json;
    foreach my $gb_file (@aux_genbank_files) {
        my $sample = $gb_file;
        $sample =~ s/.*\/(.*)\.gb/$1/g;
        my $json_file = "$dir/quality_calls/$sample.json";
        if ( -e $json_file ){
            my $json = read_json($json_file);
            $self->add_genbank_to_json($gb_file,$json);
            if ($merged_json){
                $merged_json = merge($merged_json, $json);
            }
            else {
                $merged_json = $json;
            }
        }
    }

    $self->export_json( $merged_json );

}

__PACKAGE__->meta->make_immutable;
1;
